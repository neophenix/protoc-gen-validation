// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validation.proto

package validation

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FieldValidation struct {
	// string options
	// if value is defined, it can not be ""
	NotEmptyString *bool `protobuf:"varint,1,opt,name=not_empty_string,json=notEmptyString" json:"not_empty_string,omitempty"`
	// the value has to be exactly this
	Matches *string `protobuf:"bytes,2,opt,name=matches" json:"matches,omitempty"`
	// the value must contain this substring
	Contains *string `protobuf:"bytes,3,opt,name=contains" json:"contains,omitempty"`
	// the value must match this regex
	Regex *string `protobuf:"bytes,4,opt,name=regex" json:"regex,omitempty"`
	// integer options
	// value must be less than or equal to this
	IntLte *int64 `protobuf:"varint,5,opt,name=int_lte,json=intLte" json:"int_lte,omitempty"`
	// value must be greater than or equal to this
	IntGte *int64 `protobuf:"varint,6,opt,name=int_gte,json=intGte" json:"int_gte,omitempty"`
	// value must equal this
	IntEq *int64 `protobuf:"varint,7,opt,name=int_eq,json=intEq" json:"int_eq,omitempty"`
	// floating point type options
	// value must be less than or equal to this
	FloatLte *float64 `protobuf:"fixed64,8,opt,name=float_lte,json=floatLte" json:"float_lte,omitempty"`
	// value must be greater than or equal to this
	FloatGte *float64 `protobuf:"fixed64,9,opt,name=float_gte,json=floatGte" json:"float_gte,omitempty"`
	// value must equal this
	FloatEq *float64 `protobuf:"fixed64,10,opt,name=float_eq,json=floatEq" json:"float_eq,omitempty"`
	// more string options
	// value must be at least this long
	MinLen *int64 `protobuf:"varint,11,opt,name=min_len,json=minLen" json:"min_len,omitempty"`
	// value must be at most this long
	MaxLen *int64 `protobuf:"varint,12,opt,name=max_len,json=maxLen" json:"max_len,omitempty"`
	// value must be exactly this long
	EqLen *int64 `protobuf:"varint,13,opt,name=eq_len,json=eqLen" json:"eq_len,omitempty"`
	// common option - define an error message instead of the default
	// {field} and {value} can be used as placeholders and will be replaced with the actual values
	Error *string `protobuf:"bytes,14,opt,name=error" json:"error,omitempty"`
	// more strings
	// validate using github.com/google/uuid that this is an actual uuid
	IsUuid *bool `protobuf:"varint,15,opt,name=is_uuid,json=isUuid" json:"is_uuid,omitempty"`
	// validate using net/mail ParseAddress that this is a valid email
	IsEmail *bool `protobuf:"varint,16,opt,name=is_email,json=isEmail" json:"is_email,omitempty"`
	// validate using time.Parse that this is a valid date using the default format of YYYY-MM-DD (2016-01-02 in go's crazy syntax)
	IsIso8601Date *bool `protobuf:"varint,17,opt,name=is_iso8601_date,json=isIso8601Date" json:"is_iso8601_date,omitempty"`
	// use strings.Trim to trim whitespace from the value
	Trim *bool `protobuf:"varint,18,opt,name=trim" json:"trim,omitempty"`
	// use strings.ToLower before validating
	Lc *bool `protobuf:"varint,19,opt,name=lc" json:"lc,omitempty"`
	// use strings.ToUpper before validating
	Uc *bool `protobuf:"varint,20,opt,name=uc" json:"uc,omitempty"`
	// common option - a function name that you presumably defined in the same package space as the
	// code we generate that will be called via m.Field = FuncName(m.Field) allowing for any custom transformation
	TransformFunc        *string  `protobuf:"bytes,21,opt,name=transform_func,json=transformFunc" json:"transform_func,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldValidation) Reset()         { *m = FieldValidation{} }
func (m *FieldValidation) String() string { return proto.CompactTextString(m) }
func (*FieldValidation) ProtoMessage()    {}
func (*FieldValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc2ab0b60b7792f, []int{0}
}
func (m *FieldValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValidation.Merge(m, src)
}
func (m *FieldValidation) XXX_Size() int {
	return m.Size()
}
func (m *FieldValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValidation.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValidation proto.InternalMessageInfo

func (m *FieldValidation) GetNotEmptyString() bool {
	if m != nil && m.NotEmptyString != nil {
		return *m.NotEmptyString
	}
	return false
}

func (m *FieldValidation) GetMatches() string {
	if m != nil && m.Matches != nil {
		return *m.Matches
	}
	return ""
}

func (m *FieldValidation) GetContains() string {
	if m != nil && m.Contains != nil {
		return *m.Contains
	}
	return ""
}

func (m *FieldValidation) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *FieldValidation) GetIntLte() int64 {
	if m != nil && m.IntLte != nil {
		return *m.IntLte
	}
	return 0
}

func (m *FieldValidation) GetIntGte() int64 {
	if m != nil && m.IntGte != nil {
		return *m.IntGte
	}
	return 0
}

func (m *FieldValidation) GetIntEq() int64 {
	if m != nil && m.IntEq != nil {
		return *m.IntEq
	}
	return 0
}

func (m *FieldValidation) GetFloatLte() float64 {
	if m != nil && m.FloatLte != nil {
		return *m.FloatLte
	}
	return 0
}

func (m *FieldValidation) GetFloatGte() float64 {
	if m != nil && m.FloatGte != nil {
		return *m.FloatGte
	}
	return 0
}

func (m *FieldValidation) GetFloatEq() float64 {
	if m != nil && m.FloatEq != nil {
		return *m.FloatEq
	}
	return 0
}

func (m *FieldValidation) GetMinLen() int64 {
	if m != nil && m.MinLen != nil {
		return *m.MinLen
	}
	return 0
}

func (m *FieldValidation) GetMaxLen() int64 {
	if m != nil && m.MaxLen != nil {
		return *m.MaxLen
	}
	return 0
}

func (m *FieldValidation) GetEqLen() int64 {
	if m != nil && m.EqLen != nil {
		return *m.EqLen
	}
	return 0
}

func (m *FieldValidation) GetError() string {
	if m != nil && m.Error != nil {
		return *m.Error
	}
	return ""
}

func (m *FieldValidation) GetIsUuid() bool {
	if m != nil && m.IsUuid != nil {
		return *m.IsUuid
	}
	return false
}

func (m *FieldValidation) GetIsEmail() bool {
	if m != nil && m.IsEmail != nil {
		return *m.IsEmail
	}
	return false
}

func (m *FieldValidation) GetIsIso8601Date() bool {
	if m != nil && m.IsIso8601Date != nil {
		return *m.IsIso8601Date
	}
	return false
}

func (m *FieldValidation) GetTrim() bool {
	if m != nil && m.Trim != nil {
		return *m.Trim
	}
	return false
}

func (m *FieldValidation) GetLc() bool {
	if m != nil && m.Lc != nil {
		return *m.Lc
	}
	return false
}

func (m *FieldValidation) GetUc() bool {
	if m != nil && m.Uc != nil {
		return *m.Uc
	}
	return false
}

func (m *FieldValidation) GetTransformFunc() string {
	if m != nil && m.TransformFunc != nil {
		return *m.TransformFunc
	}
	return ""
}

type MessageValidation struct {
	// returns right away after the first error instead of the default of validating all fields
	ReturnOnError *bool `protobuf:"varint,1,opt,name=return_on_error,json=returnOnError" json:"return_on_error,omitempty"`
	// uses strings.Trim on all strings in this message
	TrimStrings          *bool    `protobuf:"varint,2,opt,name=trim_strings,json=trimStrings" json:"trim_strings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageValidation) Reset()         { *m = MessageValidation{} }
func (m *MessageValidation) String() string { return proto.CompactTextString(m) }
func (*MessageValidation) ProtoMessage()    {}
func (*MessageValidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_bfc2ab0b60b7792f, []int{1}
}
func (m *MessageValidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageValidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageValidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageValidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageValidation.Merge(m, src)
}
func (m *MessageValidation) XXX_Size() int {
	return m.Size()
}
func (m *MessageValidation) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageValidation.DiscardUnknown(m)
}

var xxx_messageInfo_MessageValidation proto.InternalMessageInfo

func (m *MessageValidation) GetReturnOnError() bool {
	if m != nil && m.ReturnOnError != nil {
		return *m.ReturnOnError
	}
	return false
}

func (m *MessageValidation) GetTrimStrings() bool {
	if m != nil && m.TrimStrings != nil {
		return *m.TrimStrings
	}
	return false
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*FieldValidation)(nil),
	Field:         61032,
	Name:          "validation.field",
	Tag:           "bytes,61032,opt,name=field",
	Filename:      "validation.proto",
}

var E_Message = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*MessageValidation)(nil),
	Field:         61032,
	Name:          "validation.message",
	Tag:           "bytes,61032,opt,name=message",
	Filename:      "validation.proto",
}

func init() {
	proto.RegisterType((*FieldValidation)(nil), "validation.FieldValidation")
	proto.RegisterType((*MessageValidation)(nil), "validation.MessageValidation")
	proto.RegisterExtension(E_Field)
	proto.RegisterExtension(E_Message)
}

func init() { proto.RegisterFile("validation.proto", fileDescriptor_bfc2ab0b60b7792f) }

var fileDescriptor_bfc2ab0b60b7792f = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xcd, 0x6e, 0x13, 0x31,
	0x14, 0x85, 0x35, 0x6d, 0x93, 0x49, 0x6e, 0x9a, 0x9f, 0x9a, 0x44, 0x98, 0x56, 0x0d, 0xa1, 0x12,
	0x55, 0x56, 0x29, 0xb0, 0x40, 0xa8, 0x4b, 0x44, 0x8a, 0x90, 0x8a, 0x2a, 0x0d, 0x82, 0x45, 0x17,
	0x58, 0x66, 0xe6, 0x66, 0xb0, 0x34, 0x63, 0x27, 0xb6, 0x07, 0x85, 0x67, 0xe3, 0x05, 0x58, 0xf2,
	0x00, 0x2c, 0x50, 0x56, 0x3c, 0x06, 0xb2, 0x9d, 0x84, 0xa8, 0xdd, 0xf9, 0x9c, 0xcf, 0x39, 0xb9,
	0x77, 0x74, 0x0c, 0xbd, 0x6f, 0xbc, 0x10, 0x19, 0xb7, 0x42, 0xc9, 0xc9, 0x5c, 0x2b, 0xab, 0x08,
	0xfc, 0x77, 0x8e, 0x47, 0xb9, 0x52, 0x79, 0x81, 0x17, 0x9e, 0x7c, 0xa9, 0x66, 0x17, 0x19, 0x9a,
	0x54, 0x8b, 0xb9, 0x55, 0x3a, 0xdc, 0x3e, 0xfb, 0x71, 0x00, 0xdd, 0x2b, 0x81, 0x45, 0xf6, 0x69,
	0xfb, 0x2b, 0x32, 0x86, 0x9e, 0x54, 0x96, 0x61, 0x39, 0xb7, 0xdf, 0x99, 0xb1, 0x5a, 0xc8, 0x9c,
	0x46, 0xa3, 0x68, 0xdc, 0x48, 0x3a, 0x52, 0xd9, 0xa9, 0xb3, 0x3f, 0x78, 0x97, 0x50, 0x88, 0x4b,
	0x6e, 0xd3, 0xaf, 0x68, 0xe8, 0xde, 0x28, 0x1a, 0x37, 0x93, 0x8d, 0x24, 0xc7, 0xd0, 0x48, 0x95,
	0xb4, 0x5c, 0x48, 0x43, 0xf7, 0x3d, 0xda, 0x6a, 0xd2, 0x87, 0x9a, 0xc6, 0x1c, 0x97, 0xf4, 0xc0,
	0x83, 0x20, 0xc8, 0x43, 0x88, 0x85, 0xb4, 0xac, 0xb0, 0x48, 0x6b, 0xa3, 0x68, 0xbc, 0x9f, 0xd4,
	0x85, 0xb4, 0xd7, 0x16, 0x37, 0x20, 0xb7, 0x48, 0xeb, 0x5b, 0xf0, 0xd6, 0x22, 0x19, 0x80, 0x3b,
	0x31, 0x5c, 0xd0, 0xd8, 0xfb, 0x35, 0x21, 0xed, 0x74, 0x41, 0x4e, 0xa0, 0x39, 0x2b, 0x14, 0x0f,
	0x51, 0x8d, 0x51, 0x34, 0x8e, 0x92, 0x86, 0x37, 0x5c, 0xd8, 0x16, 0xba, 0xb8, 0xe6, 0x0e, 0x74,
	0x81, 0x8f, 0x20, 0x9c, 0x5d, 0x24, 0x78, 0x16, 0x7b, 0x3d, 0x5d, 0xb8, 0x21, 0x4a, 0x21, 0x59,
	0x81, 0x92, 0xb6, 0xc2, 0x10, 0xa5, 0x90, 0xd7, 0x28, 0x3d, 0xe0, 0x4b, 0x0f, 0x0e, 0xd7, 0x80,
	0x2f, 0x1d, 0x18, 0x40, 0x1d, 0x17, 0xde, 0x6f, 0x87, 0xe9, 0x70, 0xe1, 0xec, 0x3e, 0xd4, 0x50,
	0x6b, 0xa5, 0x69, 0x27, 0x2c, 0xef, 0x85, 0xdf, 0xd1, 0xb0, 0xaa, 0x12, 0x19, 0xed, 0xfa, 0x2f,
	0x5d, 0x17, 0xe6, 0x63, 0x25, 0x32, 0x37, 0x92, 0x30, 0x0c, 0x4b, 0x2e, 0x0a, 0xda, 0xf3, 0x24,
	0x16, 0x66, 0xea, 0x24, 0x39, 0x87, 0xae, 0x30, 0x4c, 0x18, 0xf5, 0xea, 0xe5, 0xb3, 0xe7, 0x2c,
	0xe3, 0x16, 0xe9, 0x91, 0xbf, 0xd1, 0x16, 0xe6, 0x5d, 0x70, 0xdf, 0x70, 0x8b, 0x84, 0xc0, 0x81,
	0xd5, 0xa2, 0xa4, 0xc4, 0x43, 0x7f, 0x26, 0x1d, 0xd8, 0x2b, 0x52, 0xfa, 0xc0, 0x3b, 0x7b, 0x45,
	0xea, 0x74, 0x95, 0xd2, 0x7e, 0xd0, 0x55, 0x4a, 0x9e, 0x42, 0xc7, 0x6a, 0x2e, 0xcd, 0x4c, 0xe9,
	0x92, 0xcd, 0x2a, 0x99, 0xd2, 0x81, 0x1f, 0xb7, 0xbd, 0x75, 0xaf, 0x2a, 0x99, 0x9e, 0x7d, 0x86,
	0xa3, 0xf7, 0x68, 0x0c, 0xcf, 0x71, 0xa7, 0x3e, 0xe7, 0xd0, 0xd5, 0x68, 0x2b, 0x2d, 0x99, 0x92,
	0x2c, 0xec, 0x1a, 0xda, 0xd3, 0x0e, 0xf6, 0x8d, 0x9c, 0xfa, 0x9d, 0x9f, 0xc0, 0xa1, 0x9b, 0x65,
	0xdd, 0xb0, 0xd0, 0xa0, 0x46, 0xd2, 0x72, 0x5e, 0xa8, 0x97, 0xb9, 0x4c, 0xa0, 0x36, 0x73, 0xe5,
	0x24, 0xa7, 0x93, 0xd0, 0xe4, 0xc9, 0xa6, 0xc9, 0x13, 0x5f, 0xda, 0x9b, 0xb9, 0xfb, 0x47, 0x43,
	0xff, 0xfe, 0x76, 0x1d, 0x6b, 0xbd, 0x38, 0x99, 0xec, 0x3c, 0x87, 0x3b, 0xb5, 0x4e, 0x42, 0xd4,
	0xe5, 0x2d, 0xc4, 0x65, 0x98, 0x99, 0x3c, 0xbe, 0x97, 0xba, 0xde, 0xe6, 0x6e, 0xee, 0xe9, 0x6e,
	0xee, 0xbd, 0x8d, 0x93, 0x4d, 0xe0, 0x6b, 0xfa, 0x73, 0x35, 0x8c, 0x7e, 0xad, 0x86, 0xd1, 0x9f,
	0xd5, 0x30, 0xba, 0xdd, 0x79, 0x89, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x93, 0xcd, 0x90, 0x6b,
	0xa8, 0x03, 0x00, 0x00,
}

func (m *FieldValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransformFunc != nil {
		i -= len(*m.TransformFunc)
		copy(dAtA[i:], *m.TransformFunc)
		i = encodeVarintValidation(dAtA, i, uint64(len(*m.TransformFunc)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Uc != nil {
		i--
		if *m.Uc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Lc != nil {
		i--
		if *m.Lc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.Trim != nil {
		i--
		if *m.Trim {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.IsIso8601Date != nil {
		i--
		if *m.IsIso8601Date {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.IsEmail != nil {
		i--
		if *m.IsEmail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.IsUuid != nil {
		i--
		if *m.IsUuid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.Error != nil {
		i -= len(*m.Error)
		copy(dAtA[i:], *m.Error)
		i = encodeVarintValidation(dAtA, i, uint64(len(*m.Error)))
		i--
		dAtA[i] = 0x72
	}
	if m.EqLen != nil {
		i = encodeVarintValidation(dAtA, i, uint64(*m.EqLen))
		i--
		dAtA[i] = 0x68
	}
	if m.MaxLen != nil {
		i = encodeVarintValidation(dAtA, i, uint64(*m.MaxLen))
		i--
		dAtA[i] = 0x60
	}
	if m.MinLen != nil {
		i = encodeVarintValidation(dAtA, i, uint64(*m.MinLen))
		i--
		dAtA[i] = 0x58
	}
	if m.FloatEq != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.FloatEq))))
		i--
		dAtA[i] = 0x51
	}
	if m.FloatGte != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.FloatGte))))
		i--
		dAtA[i] = 0x49
	}
	if m.FloatLte != nil {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.FloatLte))))
		i--
		dAtA[i] = 0x41
	}
	if m.IntEq != nil {
		i = encodeVarintValidation(dAtA, i, uint64(*m.IntEq))
		i--
		dAtA[i] = 0x38
	}
	if m.IntGte != nil {
		i = encodeVarintValidation(dAtA, i, uint64(*m.IntGte))
		i--
		dAtA[i] = 0x30
	}
	if m.IntLte != nil {
		i = encodeVarintValidation(dAtA, i, uint64(*m.IntLte))
		i--
		dAtA[i] = 0x28
	}
	if m.Regex != nil {
		i -= len(*m.Regex)
		copy(dAtA[i:], *m.Regex)
		i = encodeVarintValidation(dAtA, i, uint64(len(*m.Regex)))
		i--
		dAtA[i] = 0x22
	}
	if m.Contains != nil {
		i -= len(*m.Contains)
		copy(dAtA[i:], *m.Contains)
		i = encodeVarintValidation(dAtA, i, uint64(len(*m.Contains)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Matches != nil {
		i -= len(*m.Matches)
		copy(dAtA[i:], *m.Matches)
		i = encodeVarintValidation(dAtA, i, uint64(len(*m.Matches)))
		i--
		dAtA[i] = 0x12
	}
	if m.NotEmptyString != nil {
		i--
		if *m.NotEmptyString {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageValidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageValidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageValidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TrimStrings != nil {
		i--
		if *m.TrimStrings {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ReturnOnError != nil {
		i--
		if *m.ReturnOnError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidation(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FieldValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotEmptyString != nil {
		n += 2
	}
	if m.Matches != nil {
		l = len(*m.Matches)
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.Contains != nil {
		l = len(*m.Contains)
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.Regex != nil {
		l = len(*m.Regex)
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.IntLte != nil {
		n += 1 + sovValidation(uint64(*m.IntLte))
	}
	if m.IntGte != nil {
		n += 1 + sovValidation(uint64(*m.IntGte))
	}
	if m.IntEq != nil {
		n += 1 + sovValidation(uint64(*m.IntEq))
	}
	if m.FloatLte != nil {
		n += 9
	}
	if m.FloatGte != nil {
		n += 9
	}
	if m.FloatEq != nil {
		n += 9
	}
	if m.MinLen != nil {
		n += 1 + sovValidation(uint64(*m.MinLen))
	}
	if m.MaxLen != nil {
		n += 1 + sovValidation(uint64(*m.MaxLen))
	}
	if m.EqLen != nil {
		n += 1 + sovValidation(uint64(*m.EqLen))
	}
	if m.Error != nil {
		l = len(*m.Error)
		n += 1 + l + sovValidation(uint64(l))
	}
	if m.IsUuid != nil {
		n += 2
	}
	if m.IsEmail != nil {
		n += 3
	}
	if m.IsIso8601Date != nil {
		n += 3
	}
	if m.Trim != nil {
		n += 3
	}
	if m.Lc != nil {
		n += 3
	}
	if m.Uc != nil {
		n += 3
	}
	if m.TransformFunc != nil {
		l = len(*m.TransformFunc)
		n += 2 + l + sovValidation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageValidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReturnOnError != nil {
		n += 2
	}
	if m.TrimStrings != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovValidation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidation(x uint64) (n int) {
	return sovValidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FieldValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotEmptyString", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.NotEmptyString = &b
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Matches = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Contains = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Regex = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntLte", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntLte = &v
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntGte", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntGte = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntEq", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntEq = &v
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatLte", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.FloatLte = &v2
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatGte", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.FloatGte = &v2
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloatEq", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.FloatEq = &v2
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLen", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MinLen = &v
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLen", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxLen = &v
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EqLen", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EqLen = &v
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Error = &s
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUuid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsUuid = &b
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEmail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsEmail = &b
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIso8601Date", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsIso8601Date = &b
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trim", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Trim = &b
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Lc = &b
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Uc = &b
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransformFunc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TransformFunc = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageValidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageValidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageValidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnOnError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.ReturnOnError = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrimStrings", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.TrimStrings = &b
		default:
			iNdEx = preIndex
			skippy, err := skipValidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidation
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthValidation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowValidation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipValidation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthValidation
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthValidation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidation   = fmt.Errorf("proto: integer overflow")
)
